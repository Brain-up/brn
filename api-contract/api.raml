#%RAML 1.0
title: BRN API
version: v1
baseUri: http://localhost:8081/api
baseTestUri: http://10.66.216.143:8081/api
mediaType:
  - application/json

# STATISTICS ----------------------------------
/statistics:
  /subgroups:
    get:
      queryParameters:
        ids:
          required: true
          type: List<Long>
          example: 1,2
      response:
        200:
          body:
            example: {
              data: [
                {
                  subGroupId: 1,
                  completedExercises: 0
                  totalExercises: 28
                },
                {
                  subGroupId: 2,
                  completedExercises: 0
                  totalExercises: 56
                }
              ],
              errors: [],
              meta: []
            }
  /study/week:
    get:
      description: get user's weekly statistic for period. Where periaod is a two dates in the format yyyy-MM-dd
      queryParameters:
        from:
          required: true
          type: date
          example: 2000-11-23
        to:
          required: true
          type: date
          example: 2000-11-23
      response:
        200:
          body:
            example: {
              data: [
                {
                  date: 2000-11-23
                  exercisingTimeSeconds: 3000
                  progress: GREAT
                }
              ],
              errors: [],
              meta: []
            }
  /study/week:
        get:
          description: get user's weekly statistic for period. Where periaod is a two dates in the ISO date time format
          queryParameters:
            version:
              required: true
              type: integer
              example: 2
            from:
              required: true
              type: date
              example: 2000-11-23T15:00:00
            to:
              required: true
              type: date
              example: 2000-11-23T15:00:00
          response:
            200:
              body:
                example: {
                  data: [
                    {
                      date: 2000-11-23T15:00:00
                      exercisingTimeSeconds: 3000
                      progress: GREAT
                    }
                  ],
                  errors: [],
                  meta: []
                }

  /study/year:
    get:
      description: get user's yearly statistic for period. Where periaod is a two dates in the format yyyy-MM-dd
      queryParameters:
        from:
          required: true
          type: date
          example: 2000-11-23
        to:
          required: true
          type: date
          example: 2000-11-23
      response:
        200:
          body:
            example: {
              data: [
                {
                  date: 2000-11
                  exercisingDays: 15
                  exercisingTimeSeconds: 3000
                  progress: GREAT
                }
              ],
              errors: [],
              meta: []
            }
  /study/year:
      get:
        description: get user's yearly statistic for period. Where periaod is a two dates in the ISO date time format
        queryParameters:
          version:
            required: true
            type: integer
            example: 2
          from:
            required: true
            type: date
            example: 2000-11-23T15:00:00
          to:
            required: true
            type: date
            example: 2000-11-23T15:00:00
        response:
          200:
            body:
              example: {
                data: [
                  {
                    date: 2000-11-23T15:00:00
                    exercisingDays: 15
                    exercisingTimeSeconds: 3000
                    progress: GREAT
                  }
                ],
                errors: [],
                meta: []
              }
# AUDIOMETRY-----------------------------------
/audiometrics:
    get:
        queryParameters:
            locale:
                required: false
                type: String
                example: "en-us"
                default: "ru-ru"
        responses:
            200:
                body:
                    example: !include samples/audiometrics.json

    /{audiometryId}:
        get:
            responses:
                200:
                    body:
                        example: !include samples/audiometry_1_signals.json
                        example: !include samples/audiometry_2_speech.json


/audiometry-history:
    post:
        description: Save speech audiometry history
        body:
            example: !include samples/audiometryHistoryRequest.json
        responses:
            200:
                body:
                    example: 25

# AUDIO GENERATION ----------------------------
/audio:
  get:
    queryParameters:
        text:
         required: true
         type: String
         example: "London is the capital"
        locale:
          required: false
          type: string
          example: "en-us"
          default: "ru-ru"
    responses:
        200:
            body:
                example: !include samples/audio.ogg

# GROUP ----------------------------
/groups:
  get:
    queryParameters:
      locale:
       required: false
       type: string
       example: "ru-ru"
    responses:
      200:
        body:
          example: !include samples/groups.json
  /{groupId}:
    get:
      responses:
        200:
          body:
            example: !include samples/group.json

# SERIES ----------------------------
/series:
  get:
    queryParameters:
      groupId:
        description: "ID of the group series belongs to"
        required: true
        type: string
        example: "42"
    responses:
      200:
        body:
          example: !include samples/series_by_group.json
  /{seriesId}:
    get:
      responses:
        200:
          body:
            example: !include samples/series.json
  /fileFormat/{seriesId}:
    get:
      description: Get series file format by series id
      responses:
        200:
          body:
            example: !include samples/file_format.json

# SUBGROUP ----------------------------
/subgroups:
  get:
    queryParameters:
      seriesId:
        description: "ID of the series belongs to"
        required: true
        type: string
        example: "42"
    responses:
      200:
        body:
          example: !include samples/subgroup_by_series.json
  /{subGroupId}:
    get:
      responses:
        200:
          body:
            example: !include samples/subgroup_by_id.json
    delete:
      description: |
      The endpoint should delete subGroup without exercises
      queryParameters:
        subGroupId:
          description: "ID of the subGroup tasks belongs to"
          required: true
          type: string
          example: "3"
      responses:
        204:
        400:
          description: |
             Bad or not empty subGroup. This can happen if the user inserts
             incorrect number of subGroup or subGroup has exercises.
          body:
            application/json:
              type: Error
              example: {
                           "data": [],
                           "errors": "Can not delete subGroup because subGroup is not found by this id.",
                           "meta": []
                       }

# EXERCISE ----------------------------
/exercises:
  get:
    queryParameters:
      subGroupId:
        description: "ID of the subgroup exercises belongs to"
        required: true
        type: string
        example: "42"
    responses:
      200:
        body:
          example1: !include samples/exercises_for_1_series_subgroup.json
          example2: !include samples/exercises_for_2_series_subgroup.json
          example2: !include samples/exercises_for_3_series_subgroup.json
          example2: !include samples/exercises_for_4_series_subgroup.json
  /{exerciseId}:
    get:
      responses:
        200:
          body:
            example1: !include samples/exercise_for_id_1.json
  /byIds:
    post:
        description: Get available exercise ids for current user by input ids which have same subGroup.
        body:
          application/json:
            example: !include samples/exercise_request.json
        responses:
          200:
            example: !include samples/avaliable_exercise_ids_by_input_ids.json

  /{exerciseId}/active/{active}:
   put:
    responses:
        200:

# TASK ----------------------------
/tasks:
  get:
    description: |
    The tasks endpoint returns tasks associated with specified exercise id
    queryParameters:
      exerciseId:
        description: "ID of the exercise tasks belongs to"
        required: true
        type: string
        example: "3"
    responses:
      200:
        body:
          application/json:
            example_for_1_series: !include samples/tasks_by_exercise_for_1_series.json
            example_for_2_series: !include samples/tasks_by_exercise_for_2_series.json
  /{taskId}:
    get:
      description: Get a task by id
      responses:
        200:
          body:
            application/json:
              example_for_1_series: !include samples/task_by_id_for_1_series.json
              example_for_2_series: !include samples/task_by_id_for_2_series.json
              example_for_3_series: !include samples/task_by_id_for_3_series.json
              example_for_4_series: !include samples/task_by_id_for_4_series.json

# STUDY_HISTORY ----------------------
/study-history:
  post:
    description: Save history of exercises done by user
    body:
      application/json:
        example: !include samples/study_history.json
    responses:
      201:
        example: !include samples/study_history_response.json
  /todayTimer:
    get:
      description: get today current user work time in seconds
      responses:
        200:
          body:
            application/json:
              example: {
                           "data": 60,
                           "errors": [],
                           "meta": []
                       }
  /histories:
    get:
        description: get histories for current user by period from <= startTime < to.
          Where from and to are dates in yyyy-MM-dd format
        queryParameters:
              from:
                    required: true
                    type: date
                    example: "2020-11-05"
              to:
                    required: true
                    type: date
                    example: "2020-11-06"
        responses:
              200:
                example: !include samples/study_histories_dto_response.json
  /histories:
      get:
          description: get histories for current user by period from <= startTime < to.
            Where from and to are dates in ISO format
          queryParameters:
                from:
                      required: true
                      type: date
                      example: 2000-10-21T15:00:00
                to:
                      required: true
                      type: date
                      example: 2000-10-21T15:00:00
                version:
                      required: true
                      type: integer
                      example: 2
          responses:
                200:
                  example: !include samples/study_histories_dto_response.json
  /monthHistories:
      get:
          description: get histories for current user by month and year
          queryParameters:
                month:
                      required: true
                      type: integer
                      example: 11
                year:
                      required: true
                      type: integer
                      example: 2020
          responses:
                200:
                  example: !include samples/study_histories_dto_response.json

# USERS ----------------------
/users:
  get:
    description: Get the user by userName
    queryParameters:
      userName:
        description: "Name of the user"
        required: true
        type: string
        example: "userName"
    responses:
      200:
        body:
          application/json:
            example: !include samples/user_get_response.json
  /current:
    get:
      description: Get logged in user from the current session
      responses:
        200:
          body:
            application/json:
              example: !include samples/user_get_response.json
    patch:
      description: Update current user details
      body:
        application/json:
          example: !include samples/user_patch_body.json
      responses:
        200:
          body:
            application/json:
              example: !include samples/user_get_response.json
    /avatar:
      put:
        is: [Forbidden, NotFound]
        desctiprion: Update user avatar.
        queryParameters:
          avatar:
              required: true
              type: string
              example: "/pictures/avatar/girl.cvg"
        responses:
          200:
            body:
              application/json:
                example: !include samples/user_get_response.json
    /{id}/headphones:
      post:
        descriprion: Add headphones to user
        body:
          application/json:
            example: !include samples/add_headphones.json
        responses:
          201:
            body:
              application/json:
                example: !include samples/add_headphones_response.json
      get:
        descriprion: Get all headphones for user
        responses:
          200:
            body:
              application/json:
                example: !include samples/get_headphones_response.json
    /current/headphones:
      post:
        descriprion: Add headphones to current user
        body:
          application/json:
            example: !include samples/add_headphones.json
        responses:
          201:
            body:
              application/json:
                example: !include samples/add_headphones_response.json
      get:
        descriprion: Get all headphones for current user
        responses:
          200:
            body:
              application/json:
                example: !include samples/get_headphones_response.json

# Auth ----------------------
/brnlogin:
  post:
  description: Login for exist user
    body:
     application/json:
        example: !include samples/login.json
    responses:
      200:
        example: !include samples/authSuccessResponse.json
      401 (Unauthorized):
        example: !include samples/authBadCredResponse.json

/registration:
  post:
  description: Registration for new user with login him
    body:
      application/json:
        example: !include samples/registration.json
    responses:
      201 (Created):
        example: !include samples/authSuccessResponse.json
      400 (Bad Request):
        example: !include samples/authErrorResponse.json

/logout:
  post:
  description: Logout for logined user
    responses:
      204: No content

/cloud:
  /folders:
    get:
      description: Get cloud folder structure
      responses:
        200:
          body:
            application/json:
              example: !include samples/cloud_folders.json
  /upload:
    get:
      queryParameters:
        filename:
          description: "File name to be used for uploading"
          required: true
          type: string
          example: "file1.jpg"
      description: Get cloud upload form
      responses:
        200:
          body:
            application/json:
              example_for_aws_upload_form: !include samples/example_for_aws_upload_form.json
              example_for_google_upload_form: !include samples/example_for_google_upload_form.json
  /url:
    get:
      description: Get cloud bucket url
      responses:
        200:
          body:
            example: "https://cloudprovider.bucket.com"

# ADMIN  ----------------------
/admin:
    /exercises:
        get:
            description: get exercises with tasks, resources by subGroupId
        responses:
            200:
                example: !include samples/exercises_with_tasks.json
    /users:
        get:
            description: get all users
            queryParameters:
                withAnalytics:
                    required: false
                    default: false
                    type: Boolean
                    example: "true"
                pageable:
                    required: false
                    type: Pageable
        responses:
            200:
              example: !include samples/users_get_response.json
              example: !include samples/users_with_analytics_get_response.json
    /histories:
        get:
            description: get histories for user by period from <= startTime < to where time is a date in format yyyy-MM-dd
            queryParameters:
                userId:
                    required: true
                    type: integer
                    example: 1
                from:
                    required: true
                    type: date
                    example: "2020-11-05"
                to:
                    required: true
                    type: date
                    example: "2020-11-06"
        responses:
              200:
                example: !include samples/study_histories_dto_response.json
    /histories:
            get:
                description: get histories for user by period from <= startTime <= to where startTime is a date in ISO date time format
                queryParameters:
                    version:
                        required: true
                        type: integer
                        example: 2
                    userId:
                        required: true
                        type: integer
                        example: 1
                    from:
                        required: true
                        type: date
                        example: 2000-10-21T15:00:00
                    to:
                        required: true
                        type: date
                        example: 2000-10-21T15:00:00
            responses:
                  200:
                    example: !include samples/study_histories_dto_response.json
    /monthHistories:
      get:
          description: get histories for user by month and year
          queryParameters:
                userId:
                      required: true
                      type: integer
                      example: 1
                month:
                      required: true
                      type: integer
                      example: 11
                year:
                      required: true
                      type: integer
                      example: 2020
          responses:
                200:
                  example: !include samples/study_histories_dto_response.json
    /study/week:
      get:
        description: get user's weekly statistic for period. Where period is a two dates in the format yyyy-MM-dd
        queryParameters:
          userId:
            required: true
            type: long
            example: 1
          from:
            required: true
            type: date
            example: 2000-11-23
          to:
            required: true
            type: date
            example: 2000-11-23
        response:
          200:
            body:
              example: {
                data: [
                  {
                    date: 2000-10-23
                    exercisingTimeSeconds: 3000
                    progress: GREAT
                  }
                ],
                errors: [],
                meta: []
    /study/week:
          get:
            description: get user's weekly statistic for period. Where period is a two dates in the ISO date time format
            queryParameters:
              version:
                required: true
                type: integer
                example: 2
              userId:
                required: true
                type: long
                example: 1
              from:
                required: true
                type: date
                example: 2000-10-21T15:00:00
              to:
                required: true
                type: date
                example: 2000-10-21T15:00:00
            response:
              200:
                body:
                  example: {
                    data: [
                      {
                        date: 2000-10-21T15:00:00
                        exercisingTimeSeconds: 3000
                        progress: GREAT
                      }
                    ],
                    errors: [],
                    meta: []
                  }          }
    /study/year:
      get:
        description: get user's yearly statistic for period. Where period is a two dates in the format yyyy-MM-dd
        queryParameters:
          userId:
            required: true
            type: long
            example: 1
          from:
            required: true
            type: date
            example: 2000-11-23
          to:
            required: true
            type: date
            example: 2000-11-23
        response:
          200:
            body:
              example: {
                data: [
                  {
                    date: 2000-11
                    exercisingDays: 15
                    exercisingTimeSeconds: 3000
                    progress: GREAT
                  }
                ],
                errors: [],
                meta: []
              }
    /study/year:
          get:
            description: get user's yearly statistic for period. Where period is a two dates in the ISO date time format
            queryParameters:
              version:
                required: true
                type: integer
                example: 2
              userId:
                required: true
                type: long
                example: 1
              from:
                required: true
                type: date
                example: 2000-11-23T15:00:00
              to:
                required: true
                type: date
                example: 2000-11-23T15:00:00
            response:
              200:
                body:
                  example: {
                    data: [
                      {
                        date: 2000-11-23T15:00:00
                        exercisingDays: 15
                        exercisingTimeSeconds: 3000
                        progress: GREAT
                      }
                    ],
                    errors: [],
                    meta: []
                  }
    /resources:
        /{id}:
          patch:
              description: Update resource description by resource id.
              body:
                  example: !include samples/update_resource_description_request.json
              responses:
                  200:
                      example: !include samples/resource_dto_response.json
    /subgroup:
          post:
            description: Add new subgroup for existing series.
                queryParameters:
                  seriesId:
                    description: "ID of the series"
                    type: Long
                    example: 1
            body:
              application/json:
                example: !include samples/add_subgroup_to_series.json
            responses:
              201:
                body:
                  application/json:
                    example: !include samples/add_subgroup_to_series_response.json
    # LOAD FILES ----------------------
    /loadTasksFile:
        post:
            body:
                multipart/form-data:
                    properties:
                        seriesId:
                            description: "ID of the series created exercises belongs to"
                            required: true
                            type: string
                            example: "42"
                        taskFile:
                            description: "File with tasks to be uploaded"
                            formatForSeries1: "orderNumber word audioFileName pictureFileName words wordType
                                               1 бал no_noise/бал.mp3 pictures/бал.jpg (бам,сам,дам,зал,бак) OBJECT"
                            formatForSeries2: "orderNumber words
                                               1 [(),(),(мальчик, девочка), (сидит, слушает),(),()]"
                            required: true
                            type: file
            responses:
              201: