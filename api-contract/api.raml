#%RAML 1.0
title: BRN API
version: v1
baseUri: http://localhost:8081/api
baseTestUri: http://10.66.216.143:8081/api
mediaType:
  - application/json

# STATISTICS ----------------------------------
/statistics:
  /subgroups:
    get:
      queryParameters:
        ids:
          required: true
          type: List<Long>
          example: 1,2
      response:
        200:
          body:
            example: {
              data: [
                {
                  subGroupId: 1,
                  completedExercises: 0
                  totalExercises: 28
                },
                {
                  subGroupId: 2,
                  completedExercises: 0
                  totalExercises: 56
                }
              ],
              errors: [],
              meta: []
            }

# AUDIOMETRY-----------------------------------
/audiometrics:
    get:
        queryParameters:
            locale:
                required: false
                type: String
                example: "en-us"
                default: "ru-ru"
        responses:
            200:
                body:
                    example: !include samples/audiometrics.json

    /{audiometryId}:
        get:
            responses:
                200:
                    body:
                        example: !include samples/audiometry_1_signals.json
                        example: !include samples/audiometry_2_speech.json


/audiometry-history:
    post:
        description: Save speech audiometry history
        body:
            example: !include samples/audiometryHistoryRequest.json
        responses:
            200:
                body:
                    example: 25

# AUDIO GENERATION ----------------------------
/audio:
  get:
    queryParameters:
        text:
         required: true
         type: String
         example: "London is the capital"
        locale:
          required: false
          type: string
          example: "en-us"
          default: "ru-ru"
    responses:
        200:
            body:
                example: !include samples/audio.ogg

# GROUP ----------------------------
/groups:
  get:
    queryParameters:
      locale:
       required: false
       type: string
       example: "ru-ru"
    responses:
      200:
        body:
          example: !include samples/groups.json
  /{groupId}:
    get:
      responses:
        200:
          body:
            example: !include samples/group.json

# SERIES ----------------------------
/series:
  get:
    queryParameters:
      groupId:
        description: "ID of the group series belongs to"
        required: true
        type: string
        example: "42"
    responses:
      200:
        body:
          example: !include samples/series_by_group.json
  /{seriesId}:
    get:
      responses:
        200:
          body:
            example: !include samples/series.json
  /fileFormat/{seriesId}:
    get:
      description: Get series file format by series id
      responses:
        200:
          body:
            example: !include samples/file_format.json

# SUBGROUP ----------------------------
/subgroups:
  get:
    queryParameters:
      seriesId:
        description: "ID of the series belongs to"
        required: true
        type: string
        example: "42"
    responses:
      200:
        body:
          example: !include samples/subgroup_by_series.json
  /{subGroupId}:
    get:
      responses:
        200:
          body:
            example: !include samples/subgroup_by_id.json


# EXERCISE ----------------------------
/exercises:
  get:
    queryParameters:
      subGroupId:
        description: "ID of the subgroup exercises belongs to"
        required: true
        type: string
        example: "42"
    responses:
      200:
        body:
          example1: !include samples/exercises_for_1_series_subgroup.json
          example2: !include samples/exercises_for_2_series_subgroup.json
          example2: !include samples/exercises_for_3_series_subgroup.json
          example2: !include samples/exercises_for_4_series_subgroup.json
  /{exerciseId}:
    get:
      responses:
        200:
          body:
            example1: !include samples/exercise_for_id_1.json
  /byIds
    post:
        description: Get available exercise ids for current user by input ids which have same subGroup.
        body:
          application/json:
            example: !include samples/exercise_request.json
        responses:
          200:
            example: !include samples/avaliable_exercise_ids_by_input_ids.json

# TASK ----------------------------
/tasks:
  get:
    description: |
    The tasks endpoint returns tasks assotiated with specified exercise id
    queryParameters:
      exerciseId:
        description: "ID of the exercise tasks belongs to"
        required: true
        type: string
        example: "3"
    responses:
      200:
        body:
          application/json:
            example_for_1_series: !include samples/tasks_by_exercise_for_1_series.json
            example_for_2_series: !include samples/tasks_by_exercise_for_2_series.json
  /{taskId}:
    get:
      description: Get a task by id
      responses:
        200:
          body:
            application/json:
              example_for_1_series: !include samples/task_by_id_for_1_series.json
              example_for_2_series: !include samples/task_by_id_for_2_series.json
              example_for_3_series: !include samples/task_by_id_for_3_series.json
              example_for_4_series: !include samples/task_by_id_for_4_series.json

# STUDY_HISTORY ----------------------
/study-history:
  post:
    description: Save history of exercises done by user
    body:
      application/json:
        example: !include samples/study_history.json
    responses:
      201:
        example: !include samples/study_history_response.json
  /todayTimer:
    get:
      description: get today current user work time in seconds
      responses:
        200:
          body:
            application/json:
              example: {
                           "data": 60,
                           "errors": [],
                           "meta": []
                       }
  /histories:
    get:
        description: get histories for current user by period from <= startTime < to
        queryParameters:
              from:
                    required: true
                    type: date
                    example: "2020-11-05"
              to:
                    required: true
                    type: date
                    example: "2020-11-06"
        responses:
              200:
                example: !include samples/study_histories_dto_response.json
  /monthHistories:
      get:
          description: get histories for current user by month and year
          queryParameters:
                month:
                      required: true
                      type: integer
                      example: 11
                year:
                      required: true
                      type: integer
                      example: 2020
          responses:
                200:
                  example: !include samples/study_histories_dto_response.json

# USERS ----------------------
/users:
  get:
    description: Get the user by userName
    queryParameters:
      userName:
        description: "Name of the user"
        required: true
        type: string
        example: "userName"
    responses:
      200:
        body:
          application/json:
            example: !include samples/user_get_response.json
  /current:
    get:
      description: Get logged in user from the current session
      responses:
        200:
          body:
            application/json:
              example: !include samples/user_get_response.json
    patch:
      description: Update current user details
      body:
        application/json:
          example: !include samples/user_patch_body.json
      responses:
        200:
          body:
            application/json:
              example: !include samples/user_get_response.json
    /avatar:
      put:
        is: [Forbidden, NotFound]
        desctiprion: Update user avatar.
        queryParameters:
          avatar:
              required: true
              type: string
              example: "/pictures/avatar/girl.cvg"
        responses:
          200:
            body:
              application/json:
                example: !include samples/user_get_response.json


# Auth ----------------------
/brnlogin:
  post:
  description: Login for exist user
    body:
     application/json:
        example: !include samples/login.json
    responses:
      200:
        example: !include samples/authSuccessResponse.json
      401 (Unauthorized):
        example: !include samples/authBadCredResponse.json

/registration:
  post:
  description: Registration for new user with login him
    body:
      application/json:
        example: !include samples/registration.json
    responses:
      201 (Created):
        example: !include samples/authSuccessResponse.json
      400 (Bad Request):
        example: !include samples/authErrorResponse.json

/logout:
  post:
  description: Logout for logined user
    responses:
      204: No content

# LOAD FILES ----------------------
/loadTasksFile:
  post:
    body:
      multipart/form-data:
        properties:
          seriesId:
            description: "ID of the series created exercises belongs to"
            required: true
            type: string
            example: "42"
          taskFile:
            description: "File with tasks to be uploaded"
            formatForSeries1: "orderNumber word audioFileName pictureFileName words wordType
                               1 бал no_noise/бал.mp3 pictures/бал.jpg (бам,сам,дам,зал,бак) OBJECT"
            formatForSeries2: "orderNumber words
                               1 [(),(),(мальчик, девочка), (сидит, слушает),(),()]"
            required: true
            type: file
    responses:
      201:

/cloud:
  /folders:
    get:
      description: Get cloud folder structure
      responses:
        200:
          body:
            application/json:
              example: !include samples/cloud_folders.json
  /upload:
    get:
      queryParameters:
        filename:
          description: "File name to be used for uploading"
          required: true
          type: string
          example: "file1.jpg"
      description: Get cloud upload form
      responses:
        200:
          body:
            application/json:
              example_for_aws_upload_form: !include samples/example_for_aws_upload_form.json
              example_for_google_upload_form: !include samples/example_for_google_upload_form.json
  /url:
    get:
      description: Get cloud bucket url
      responses:
        200:
          body:
            example: "https://cloudprovider.bucket.com"

# ADMIN  ----------------------
/admin
    /users
        get:
            description: get all users
        responses:
            200:
              example: !include samples/users_get_response.json
    /histories:
        get:
            description: get histories for user by period from <= startTime < to
            queryParameters:
                userId:
                    required: true
                    type: integer
                    example: 1
                from:
                    required: true
                    type: date
                    example: "2020-11-05"
                to:
                    required: true
                    type: date
                    example: "2020-11-06"
        responses:
              200:
                example: !include samples/study_histories_dto_response.json
  /monthHistories:
      get:
          description: get histories for user by month and year
          queryParameters:
                userId:
                      required: true
                      type: integer
                      example: 1
                month:
                      required: true
                      type: integer
                      example: 11
                year:
                      required: true
                      type: integer
                      example: 2020
          responses:
                200:
                  example: !include samples/study_histories_dto_response.json