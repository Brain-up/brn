buildscript {
    ext {
        kotlin_version = "1.3.50" // Required for Kotlin integration
        spring_boot_version = "2.1.8.RELEASE"
        mockitoVersion = "3.0.0"
        junitVersion = "5.3.1"
        flywayVersion = "5.2.4"
    }
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version" // Required for Kotlin integration
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version" // See https://kotlinlang.org/docs/reference/compiler-plugins.html#spring-support
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
        classpath "net.ltgt.gradle:gradle-apt-plugin:0.21"
    }
}

apply plugin: "kotlin" // Required for Kotlin integration
apply plugin: "kotlin-spring" // https://kotlinlang.org/docs/reference/compiler-plugins.html#spring-support
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"
apply plugin: "kotlin-jpa"
apply plugin: "kotlin-allopen"
apply plugin: "kotlin-kapt"
apply plugin: "net.ltgt.apt-idea"

allOpen {
    annotation "javax.persistence.Entity"
    annotation "javax.persistence.MappedSuperclass"
    annotation "javax.persistence.Embeddable"
}

repositories {
    jcenter()
}

ext["mockito.version"] = "${mockitoVersion}"
dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version" // Required for Kotlin integration
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-batch"
    implementation "org.springframework.boot:spring-boot-starter-cache"
    implementation group: 'com.github.ben-manes.caffeine', name: 'caffeine'
    implementation "org.postgresql:postgresql"
    implementation "org.flywaydb:flyway-core:$flywayVersion"

    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-csv"
    
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: "junit", module: "junit"
    }
    testCompile "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testCompile "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
    testCompile "com.nhaarman:mockito-kotlin:1.6.0"
    testCompile group: 'org.jetbrains.kotlin', name: 'kotlin-test', version: '1.3.50'
    compile "org.mapstruct:mapstruct:1.3.1.Final"
    compile "org.apache.logging.log4j:log4j-api-kotlin:1.0.0"
    compile "org.apache.logging.log4j:log4j-api:2.11.2"
    compile "org.apache.logging.log4j:log4j-core:2.11.2"
    compile group: "org.apache.commons", name: "commons-lang3", version: "3.9"
    compile group: "org.apache.commons", name: "commons-math3", version: "3.6.1"
    compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.1'
    compile group: "commons-io", name: "commons-io", version: "2.6"

    compile group: "org.apache.commons", name: "commons-collections4", version: "4.0"
    compile group: 'com.google.code.gson', name: 'gson', version: '2.7'
    compile group: "io.springfox", name: "springfox-swagger-ui", version: "2.9.2"
    compile group: "io.springfox", name: "springfox-swagger2", version: "2.9.2"
    compile "com.h2database:h2"

    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: "junit", module: "junit"
    }
    testCompile "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testCompile "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
    testCompile "com.nhaarman:mockito-kotlin:1.6.0"

    kapt("org.mapstruct:mapstruct-processor:1.3.1.Final")
    kapt("org.mapstruct:mapstruct-jdk8:1.3.1.Final")
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

// --- ktlint - kotlin code style plugin ---
configurations {
    ktlint
}
dependencies {
    ktlint "com.github.shyiko:ktlint:0.31.0"
}

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "-F", "src/**/*.kt"
}

project.task("ktlint", type: JavaExec) {
    group = "verification"
    description = "Runs ktlint."
    main = "com.github.shyiko.ktlint.Main"
    classpath = project.configurations.ktlint
    args = [
            "--reporter=plain",
            "--reporter=checkstyle,output=${project.buildDir}/reports/ktlint/ktlint-checkstyle-report.xml",
            "src/**/*.kt"
    ]
}
// compileKotlin.dependsOn ktlint

tasks.withType(Test) { Test task ->
    task.useJUnitPlatform { JUnitPlatformOptions options ->
        options.excludeTags "integration-test"
    }
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = "full"
}

task integrationTest(type: Test) { Test task ->
    task.useJUnitPlatform { JUnitPlatformOptions options ->
        options.includeTags "integration-test"
    }
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = "full"
    System.properties.remove("java.endorsed.dirs")
    task.systemProperties(System.properties)
    println "Test task system properties: " + task.systemProperties
    tasks.check.dependsOn task
    task.shouldRunAfter tasks.test
}
