plugins {
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id "org.jetbrains.kotlin.jvm"
    id "org.jetbrains.kotlin.plugin.spring"
    id "org.jetbrains.kotlin.plugin.jpa"
    id "org.jetbrains.kotlin.plugin.allopen"
    id "jacoco"
    id 'org.sonarqube' version "3.0"
}

allOpen {
    annotation "javax.persistence.Entity"
    annotation "javax.persistence.MappedSuperclass"
    annotation "javax.persistence.Embeddable"
}

repositories {
    jcenter()
}

ext["mockito.version"] = "${mockitoVersion}"
dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-batch"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.security:spring-security-test"
    implementation "org.springframework.boot:spring-boot-devtools"
    implementation "org.postgresql:postgresql"
    implementation "org.flywaydb:flyway-core:$flywayVersion"

    implementation "com.auth0:java-jwt:3.10.3"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-csv"

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.2'

    testImplementation "org.jetbrains.kotlin:kotlin-test:1.3.72"
    implementation "org.apache.logging.log4j:log4j-api-kotlin:1.0.0"
    implementation "org.apache.commons:commons-lang3:3.10"
    implementation "org.apache.commons:commons-collections4:4.4"
    implementation "commons-io:commons-io:2.7"

    implementation "io.springfox:springfox-swagger-ui:2.10.5"
    implementation "io.springfox:springfox-swagger2:2.9.2"

    implementation 'com.amazonaws:aws-java-sdk:1.11.808'
    implementation 'com.google.cloud:google-cloud-storage:1.113.9'

    implementation 'khttp:khttp:1.0.0'
    implementation 'net.bramp.ffmpeg:ffmpeg:0.6.2'

    testImplementation 'org.amshove.kluent:kluent:1.61'

    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: "junit"
        exclude group: "org.mockito"
    }
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    testImplementation "org.mockito:mockito-junit-jupiter:$mockitoVersion"
    testImplementation "com.nhaarman:mockito-kotlin:1.6.0"

    testImplementation("org.testcontainers:testcontainers")
    testImplementation "org.testcontainers:junit-jupiter:$testContainersVersion"
    testImplementation "org.testcontainers:postgresql:$testContainersVersion"
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

// --- ktlint - kotlin code style plugin ---
configurations {
    ktlint
}

dependencies {
    ktlint "com.pinterest:ktlint:0.38.0"
}

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "-F", "src/**/*.kt"
}

project.task("ktlint", type: JavaExec) {
    group = "verification"
    description = "Runs ktlint."
    main = "com.pinterest.ktlint.Main"
    classpath = project.configurations.ktlint
    args = [
            "--reporter=plain",
            "--reporter=checkstyle,output=${project.buildDir}/reports/ktlint/ktlint-checkstyle-report.xml",
            "src/**/*.kt"
    ]
}

project.exec {
    commandLine = "git config core.hooksPath .githooks".split(" ")
}

compileKotlin.dependsOn ktlint

test {
    useJUnitPlatform { options ->
        options.excludeTags "integration-test"
    }
}

tasks.test {
    finalizedBy(tasks.jacocoTestReport)
}

tasks.jacocoTestReport {
    dependsOn(tasks.test)

    reports {
        xml.enabled true
        html.enabled true
        xml.destination = file(getBuildDir().toString() + File.separator.toString() + "jacoco" + File.separator.toString() + "coverage.xml")
        csv.enabled false
        html.destination = file(getBuildDir().toString() + File.separator.toString() + "jacoco" + File.separator.toString() + "html")
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'com/epam/brn/dto/**',
                    'com/epam/brn/model/**',
                    'com/epam/brn/config/**',
                    'com/epam/brn/exception/**',
                    'com/epam/brn/Application*'
            ])
        }))
    }
    getExecutionData().setFrom("$buildDir/jacoco/test.exec")
}

task integrationTest(type: Test) { task ->
    task.useJUnitPlatform { JUnitPlatformOptions options ->
        options.includeTags "integration-test"
    }
    task.shouldRunAfter tasks.test
    group 'Verification'
    description 'Runs the integration tests on Postgres Test Container.'
}

sonarqube {
    properties {
        // Root project information
        property 'sonar.projectKey', 'Brain-up_brn'
        property 'sonar.organization', 'brain-up'
        property 'sonar.host.url', 'https://sonarcloud.io'

        property 'sonar.coverage.jacoco.xmlReportPaths', "./build/jacoco/coverage.xml"
        property 'sonar.language','kotlin'
        property "sonar.java.coveragePlugin", "jacoco"
        property 'sonar.working.directory', "./build/sonar"
        property 'sonar.coverage.exclusions', "**/com/epam/brn/dto/**,**/com/epam/brn/model/**,**/com/epam/brn/config/**,**/com/epam/brn/exception/**,**/com/epam/brn/Application*"
    }
}
